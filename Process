# Process

## day 3
Install framework on my mac. libGDX does not work with jave 10+ so I had to downgrade to java 8, this was harder than I
anticipated because java automatically installs multiple versions rather than replaces old ones. I used homebrew to install
java 8 via terminal.

## Day 4
libGDX works with different "screens" in stead of with XML layout files. These screens implement the fucntional aspect as well
as the visual aspect of the app. Shapes and text can be drawn on the screens using the render method that you have to 
make on every screen. Using an "Orhtographic camera" the view that is shown to the user is identified, and within this view
"shapeRenderers can be used to create shapes, such as the rectangles needed in snake
<img width="300" alt="Screen Shot 2019-06-06 at 15 15 48" src="https://user-images.githubusercontent.com/47351811/59035658-06994980-886e-11e9-8643-810273d54ff2.png">

In this image you can see a single white rectangle that will be the snakes head.

When the snake starts moving, I will have to keep removing and readding the snakes head and all the body parts,
this however can be quite tricky because not only do you need to know where the head is now to draw it, but you
also need to know where the head was to remove it from that position. To circumvent this I chose to instead have the
screen clear out everything that is drawn on it every single "tick" and have it draw on the current situation
every single "tick" as well. (this is done in the render function which gets called 60 times per second.
this effectively means my game now runs at 60 FPS.)

## Day 5
Moving the head over the grid proved quite easy so I went on to having body parts following the head.
I had to decide on one of two ways of doing this:
- Having all the individual pieces follow the head in a train like fashion
- Moving the last body part to the front and leaving the ones in the middle at the same position

I chose to go with the latter option because it requires less movement and thus less actions to execute for the computer
and less actions for me to program.

#### Weekend

## Day 8
Today I want the snake to be able to die when it either touches itself or hits the screen walls.
To do this, libGDX has a useful tool: the enum GAME STATE.

The real problem arises when I found that the grid over which the snake moves does not perfectly
fit the screen, and even I hardcode it to be, I suspect that it will not fit on differently sized phones.

After some research I have found that libGDX offers something called a Viewport which is a way of
managing the Orthographic camera. I still have to find out how it exactly works but it should fix the problem.

## Day 9
I implemented the viewport so that the game can be played on screens with different sizes and added a white
border to the outside of the playing field. The game itself is now almost finished however there are a couple
tiny visual bugs that are hard to get rid off:
- When the snake dies, in stead of showing the snake lying still, the last and first segment of the body
start spacing out.
- When an apple is eaten the apple is showed in stead of the head when the snake goes over it, and only when
the head has passed the snake does the apple disappear, making the game feel like its lagging.
- Finally I still need to add a score counter and a message when the game is over

